{"type":"data","nodes":[null,null,null,{"type":"data","data":[{"content":1,"categoryTitle":2},"\u003Ch1>Styling in SvelteKit\u003C/h1>\n\u003Cp>Styling is an important aspect of web development. In this guide, we will explore different ways to style your SvelteKit applications.\u003C/p>\n\u003Ch2>CSS in Svelte\u003C/h2>\n\u003Cp>You can write CSS directly in your Svelte components. Here&#x2019;s an example:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-javascript\">\n    \u003Cspan class=\"hljs-keyword\">let\u003C/span> color = \u003Cspan class=\"hljs-string\">&apos;blue&apos;\u003C/span>;\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">style\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-css\">\n    \u003Cspan class=\"hljs-selector-tag\">h1\u003C/span> {\n        \u003Cspan class=\"hljs-attribute\">color\u003C/span>: \u003Cspan class=\"hljs-built_in\">var\u003C/span>(--color);\n    }\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">style\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span> \u003Cspan class=\"hljs-attr\">style\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;--color: {color}&quot;\u003C/span>&gt;\u003C/span>Hello, styled world!\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003Ch2>Scoped Styles\u003C/h2>\n\u003Cp>CSS written in a Svelte component is scoped to that component by default. This means the styles won&#x2019;t affect other components.\u003C/p>\n\u003Ch2>Global Styles\u003C/h2>\n\u003Cp>To define global styles, use a \u003Ccode>&lt;style global&gt;\u003C/code> tag:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">style\u003C/span> \u003Cspan class=\"hljs-attr\">global\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-css\">\n    \u003Cspan class=\"hljs-selector-tag\">body\u003C/span> {\n        \u003Cspan class=\"hljs-attribute\">margin\u003C/span>: \u003Cspan class=\"hljs-number\">0\u003C/span>;\n        \u003Cspan class=\"hljs-attribute\">font-family\u003C/span>: Arial, sans-serif;\n    }\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">style\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003Ch2>CSS Frameworks\u003C/h2>\n\u003Cp>SvelteKit supports popular CSS frameworks like TailwindCSS and Bootstrap. Here&#x2019;s how to set up TailwindCSS:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cp>\u003Cstrong>Install TailwindCSS\u003C/strong>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-bash\">npm install tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n\u003C/code>\u003C/pre>\u003C/li>\n\u003Cli>\u003Cp>\u003Cstrong>Configure TailwindCSS\u003C/strong> in \u003Ccode>tailwind.config.js\u003C/code>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-js\">\u003Cspan class=\"hljs-variable language_\">module\u003C/span>.\u003Cspan class=\"hljs-property\">exports\u003C/span> = {\n    \u003Cspan class=\"hljs-attr\">content\u003C/span>: [\u003Cspan class=\"hljs-string\">&apos;./src/**/*.{html,js,svelte,ts}&apos;\u003C/span>],\n    \u003Cspan class=\"hljs-attr\">theme\u003C/span>: {\n        \u003Cspan class=\"hljs-attr\">extend\u003C/span>: {}\n    },\n    \u003Cspan class=\"hljs-attr\">plugins\u003C/span>: []\n};\n\u003C/code>\u003C/pre>\u003C/li>\n\u003Cli>\u003Cp>\u003Cstrong>Import TailwindCSS\u003C/strong> in your \u003Ccode>src/app.css\u003C/code>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-css\">\u003Cspan class=\"hljs-keyword\">@tailwind\u003C/span> base;\n\u003Cspan class=\"hljs-keyword\">@tailwind\u003C/span> components;\n\u003Cspan class=\"hljs-keyword\">@tailwind\u003C/span> utilities;\n\u003C/code>\u003C/pre>\u003C/li>\n\u003Cli>\u003Cp>\u003Cstrong>Include the CSS file\u003C/strong> in your project:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-js\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> \u003Cspan class=\"hljs-string\">&apos;./app.css&apos;\u003C/span>;\n\u003C/code>\u003C/pre>\u003C/li>\n\u003C/ol>\n\u003Cp>Now you can use TailwindCSS classes in your Svelte components:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md space-y-4&quot;\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;text-xl font-bold&quot;\u003C/span>&gt;\u003C/span>Hello, TailwindCSS!\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">p\u003C/span> \u003Cspan class=\"hljs-attr\">class\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;text-gray-500&quot;\u003C/span>&gt;\u003C/span>This is styled with TailwindCSS.\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">p\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003Ch2>CSS Preprocessors\u003C/h2>\n\u003Cp>SvelteKit supports CSS preprocessors like SCSS. Here&#x2019;s how to set up SCSS:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cp>\u003Cstrong>Install SCSS\u003C/strong>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-bash\">npm install -D svelte-preprocess sass\n\u003C/code>\u003C/pre>\u003C/li>\n\u003Cli>\u003Cp>\u003Cstrong>Configure SCSS\u003C/strong> in \u003Ccode>svelte.config.js\u003C/code>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-js\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> sveltePreprocess \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&apos;svelte-preprocess&apos;\u003C/span>;\n\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">default\u003C/span> {\n    \u003Cspan class=\"hljs-attr\">preprocess\u003C/span>: \u003Cspan class=\"hljs-title function_\">sveltePreprocess\u003C/span>({\n        \u003Cspan class=\"hljs-attr\">scss\u003C/span>: {\n            \u003Cspan class=\"hljs-attr\">includePaths\u003C/span>: [\u003Cspan class=\"hljs-string\">&apos;src&apos;\u003C/span>]\n        }\n    })\n};\n\u003C/code>\u003C/pre>\u003C/li>\n\u003Cli>\u003Cp>\u003Cstrong>Use SCSS\u003C/strong> in your components:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">style\u003C/span> \u003Cspan class=\"hljs-attr\">lang\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;scss&quot;\u003C/span>&gt;\u003C/span>\n    &#x24;primary-color: blue;\n\n    h1 {\n        color: &#x24;primary-color;\n    }\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">style\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>Hello, SCSS!\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/li>\n\u003C/ol>\n\u003Cp>These styling methods provide flexibility and power to style your SvelteKit applications effectively.\u003C/p>\n","SvelteKit"],"uses":{"params":["section","category","subcategory"]}}]}
