{"type":"data","nodes":[null,null,null,{"type":"data","data":[{"content":1,"categoryTitle":2},"\u003Ch1>Advanced Techniques in SvelteKit\u003C/h1>\n\u003Cp>In this tutorial, we will explore some advanced techniques to enhance your SvelteKit applications.\u003C/p>\n\u003Ch2>Server-Side Rendering (SSR)\u003C/h2>\n\u003Cp>SvelteKit supports server-side rendering out of the box. This allows you to pre-render pages on the server before sending them to the client.\u003C/p>\n\u003Ch3>Enabling SSR\u003C/h3>\n\u003Cp>To enable SSR, configure your SvelteKit project to use a suitable adapter like \u003Ccode>@sveltejs/adapter-node\u003C/code>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-bash\">npm install @sveltejs/adapter-node\n\u003C/code>\u003C/pre>\u003Cp>Update your \u003Ccode>svelte.config.js\u003C/code>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-js\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> adapter \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&apos;@sveltejs/adapter-node&apos;\u003C/span>;\n\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">default\u003C/span> {\n    \u003Cspan class=\"hljs-attr\">kit\u003C/span>: {\n        \u003Cspan class=\"hljs-attr\">adapter\u003C/span>: \u003Cspan class=\"hljs-title function_\">adapter\u003C/span>(),\n        \u003Cspan class=\"hljs-attr\">target\u003C/span>: \u003Cspan class=\"hljs-string\">&apos;#svelte&apos;\u003C/span>\n    }\n};\n\u003C/code>\u003C/pre>\u003Ch2>Fetching Data\u003C/h2>\n\u003Cp>You can fetch data from external APIs and use it in your components. Here&apos;s an example of fetching data in a \u003Ccode>load\u003C/code> function:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-js\">\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">async\u003C/span> \u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">load\u003C/span>(\u003Cspan class=\"hljs-params\">{ fetch }\u003C/span>) {\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> response = \u003Cspan class=\"hljs-keyword\">await\u003C/span> \u003Cspan class=\"hljs-title function_\">fetch\u003C/span>(\u003Cspan class=\"hljs-string\">&apos;https://api.example.com/data&apos;\u003C/span>);\n    \u003Cspan class=\"hljs-keyword\">const\u003C/span> data = \u003Cspan class=\"hljs-keyword\">await\u003C/span> response.\u003Cspan class=\"hljs-title function_\">json\u003C/span>();\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> {\n        \u003Cspan class=\"hljs-attr\">props\u003C/span>: {\n            data\n        }\n    };\n}\n\u003C/code>\u003C/pre>\u003Cp>Use the fetched data in your Svelte component:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span> \u003Cspan class=\"hljs-attr\">context\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;module&quot;\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-javascript\">\n    \u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">async\u003C/span> \u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">load\u003C/span>(\u003Cspan class=\"hljs-params\">{ fetch }\u003C/span>) {\n        \u003Cspan class=\"hljs-keyword\">const\u003C/span> response = \u003Cspan class=\"hljs-keyword\">await\u003C/span> \u003Cspan class=\"hljs-title function_\">fetch\u003C/span>(\u003Cspan class=\"hljs-string\">&apos;/api/data&apos;\u003C/span>);\n        \u003Cspan class=\"hljs-keyword\">return\u003C/span> {\n            \u003Cspan class=\"hljs-attr\">props\u003C/span>: {\n                \u003Cspan class=\"hljs-attr\">data\u003C/span>: \u003Cspan class=\"hljs-keyword\">await\u003C/span> response.\u003Cspan class=\"hljs-title function_\">json\u003C/span>()\n            }\n        };\n    }\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-javascript\">\n    \u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">let\u003C/span> data;\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">main\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>Data from API\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">h1\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">pre\u003C/span>&gt;\u003C/span>{JSON.stringify(data, null, 2)}\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">pre\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">main\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003Ch2>Using Stores\u003C/h2>\n\u003Cp>Svelte stores provide a reactive way to manage state across your application. Here&apos;s an example of creating and using a writable store:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-js\">\u003Cspan class=\"hljs-comment\">// src/stores.js\u003C/span>\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> { writable } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&apos;svelte/store&apos;\u003C/span>;\n\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> \u003Cspan class=\"hljs-keyword\">const\u003C/span> count = \u003Cspan class=\"hljs-title function_\">writable\u003C/span>(\u003Cspan class=\"hljs-number\">0\u003C/span>);\n\u003C/code>\u003C/pre>\u003Cp>Use the store in a Svelte component:\u003C/p>\n\u003Cpre>\u003Ccode class=\"hljs language-html\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\u003Cspan class=\"language-javascript\">\n    \u003Cspan class=\"hljs-keyword\">import\u003C/span> { count } \u003Cspan class=\"hljs-keyword\">from\u003C/span> \u003Cspan class=\"hljs-string\">&apos;../stores&apos;\u003C/span>;\n\n    \u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-title function_\">increment\u003C/span>(\u003Cspan class=\"hljs-params\">\u003C/span>) {\n        count.\u003Cspan class=\"hljs-title function_\">update\u003C/span>(\u003Cspan class=\"hljs-function\">(\u003Cspan class=\"hljs-params\">n\u003C/span>) =&gt;\u003C/span> n + \u003Cspan class=\"hljs-number\">1\u003C/span>);\n    }\n\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">button\u003C/span> \u003Cspan class=\"hljs-attr\">on:click\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;{increment}&quot;\u003C/span>&gt;\u003C/span>Clicked {&#x24;count} times\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">button\u003C/span>&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003Cp>These techniques will help you build more dynamic and efficient SvelteKit applications.\u003C/p>\n","SvelteKit"],"uses":{"params":["section","category","subcategory"]}}]}
